//
//
//Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
//Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
//Square 	  	P4,n=n2 	  	1, 4, 9, 16, 25, ...
//Pentagonal 	  	P5,n=n(3n-1)/2 	  	1, 5, 12, 22, 35, ...
//Hexagonal 	  	P6,n=n(2n-1) 	  	1, 6, 15, 28, 45, ...
//Heptagonal 	  	P7,n=n(5n-3)/2 	  	1, 7, 18, 34, 55, ...
//Octagonal 	  	P8,n=n(3n-2) 	  	1, 8, 21, 40, 65, ...
//
//The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
//
//    The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
//    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
//    This is the only set of 4-digit numbers with this property.
//
//Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
//

package problems;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Problem_61 {

	private static double thenTime;
	private static double nowTime;

	private static List<Integer> triangles;
	private static List<Integer> squares;
	private static List<Integer> pentagons;
	private static List<Integer> hexagons;
	private static List<Integer> heptagons;
	private static List<Integer> octagons;

	public static void main(String[] args) {

		triangles = triangles();
		squares = squares();
		pentagons = pentagons();
		hexagons = hexagons();
		heptagons = heptagons();
		octagons = octagons();

		ArrayList<String> shapes = new ArrayList<>();
		shapes.add("square");
		shapes.add("pentagon");
		shapes.add("hexagon");
		shapes.add("heptagon");
		shapes.add("octagon");

				for (int triangle: triangles) {
					ArrayList<Integer> rotatingList = rotatingList(shapes, triangle, new ArrayList<Integer>());
					
					if (rotatingList.size() == 5) {
						int sum = getSum(rotatingList, triangle);
						if (sum > 0) {
						System.out.println(sum);
						}
					}

				}
	}
	
	
	private static int getSum(ArrayList<Integer> input, int triangle) {
		String s = Integer.toString(triangle).substring(0, 2);
		String s1 = Integer.toString(input.get(4)).substring(2, 4);
		
		if (s.equals(s1)) {
			System.out.println(input+" "+triangle);
			return triangle + input.stream()
			                       .mapToInt(e -> e)
			                       .sum();
		}
		
		return 0;
	}

	static ArrayList<Integer> rotatingList(ArrayList<String> shapes, int combo, ArrayList<Integer> group) {
		if (shapes.size()==0) {
			return group;
		}
		
		ArrayList<Integer> answer = new ArrayList<>();
		String comboString = Integer.toString(combo);
		int comboSuffix = Integer.parseInt(comboString.substring(2,4));

		for (String shape: shapes) {
			ArrayList<String> newShapes = new ArrayList<>(shapes);
			newShapes.remove(shape);

			List<Integer> joinableCombos = xxabCombos(comboSuffix, shape);
			for (int joinableCombo: joinableCombos) {
				if (isTheAnswer(answer, combo)) {
					return answer;
				} else {
					answer.clear();
				}
	
				answer.add(joinableCombo);
				answer.addAll(rotatingList(newShapes, joinableCombo, group));
			}
		}
		return answer;
	}
	
	private static boolean isTheAnswer(ArrayList<Integer> answer, int combo) {
		if (answer.size() != 5) {
			return false;
		}
		
		String first = Integer.toString(combo);
		String last = Integer.toString(answer.get(4));
		return first.substring(0, 2).equals(last.substring(2, 4));
		
	}


	private static List<Integer> xxabCombos(int suffix, String shape) {
		String suffixString = Integer.toString(suffix);
		List<Integer> shapeList = new ArrayList<>();
		switch (shape) {
		case ("square") :
			shapeList = squares;
		break;

		case ("pentagon") :
			shapeList = pentagons;
		break;

		case ("hexagon") :
			shapeList = hexagons;
		break;

		case ("heptagon") :
			shapeList = heptagons;
		break;

		case ("octagon") :
			shapeList = octagons;
		break;

		default :
			shapeList = null;
			break;
		}
		return shapeList.stream()
				.map(e -> Integer.toString(e))
				.filter(e -> e.substring(0, 2).equals(suffixString))
				.map(e -> Integer.parseInt(e))
				.collect(Collectors.toList());		
	}

	private static List<Integer> triangles() {
		return IntStream.range(45, 141)
				.map(Problem_61::triangle)
				.boxed()
				.collect(Collectors.toList());
	}


	private static List<Integer> squares() {
		return IntStream.range(32, 100)
				.map(Problem_61::square)
				.boxed()
				.collect(Collectors.toList());
	}


	private static List<Integer> pentagons() {
		return IntStream.range(26, 82)
				.map(Problem_61::pentagon)
				.boxed()
				.collect(Collectors.toList());
	}


	private static List<Integer> hexagons() {
		return IntStream.range(23, 71)
				.map(Problem_61::hexagon)
				.boxed()
				.collect(Collectors.toList());
	}


	private static List<Integer> heptagons() {
		return IntStream.range(21, 64)
				.map(Problem_61::heptagon)
				.boxed()
				.collect(Collectors.toList());
	}


	private static List<Integer> octagons() {
		return IntStream.range(19, 59)
				.map(Problem_61::octagon)
				.boxed()
				.collect(Collectors.toList());
	}


	private static int triangle(int n) {
		return n*(n+1)/2;
	}

	private static int square(int n) {
		return n*n;
	}

	private static int pentagon(int n) {
		return n*(3*n-1)/2;
	}

	private static int hexagon(int n) {
		return n*(2*n-1);
	}

	private static int heptagon(int n) {
		return n*(5*n-3)/2;
	}

	private static int octagon(int n) {
		return n*(3*n-2);
	}	
}